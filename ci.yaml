trigger:
  branches:
    exclude: 
    - u/*
pr:
  branches:
    include:
    - main
variables:
- name: TeamName
  value: machinelearning-tools
- name: BuildArgs
  value: /p:DotNetSignType=$(SigningType)
- ${{ if eq(variables['Build.DefinitionName'], 'dotnet.AzCopyNet') }}:
  - group: DotNet-Symbol-Publish
  - name: BuildArgs
    value: /p:DotNetSignType=$(SigningType)
           /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
           /p:PublishToSymbolServer=true
           /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
           /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)

  
jobs:
- template: eng\common\templates\jobs\jobs.yml
  parameters:
    enableMicrobuild: true
    enablePublishBuildAssets: false
    enablePublishUsingPipelines: true
    artifacts:
      publish:
        logs: true
    workspace:
      clean: all
    jobs:
    - job: Build
      timeoutInMinutes: 90
      strategy:
        matrix:
          Win-x64-Release:
            _configuration: Release
            _Use32Bit: false
            _platform: x64
      pool:
        name: VSEng-MicroBuildVS2019
      steps:
        - task: MicroBuildSigningPlugin@3
          displayName: Install signing plugin
          inputs:
            signType: $(SigningType)
            feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
          condition: and(succeeded(), eq(variables['SigningType'], 'real'), eq(variables['_platform'], 'x64'))
          
        - script: eng\common\CIBuild.cmd 
                    -configuration $(_configuration)
                    -prepareMachine
                    -warnAsError 0
                    -bl 
                    /p:Use32Bit=$(_Use32Bit)
                    /p:Test=False
                    /p:Pack=False
                    /p:Publish=False
                    /p:Sign=False
                    $(BuildArgs)
          displayName: Build
          condition: succeeded()
    
        - task: DotNetCoreCLI@2
          displayName: Test
          inputs:
            command: 'test'
            publishTestResults: true
            arguments: '--collect "Code coverage"
                        --no-build
                        -c $(_configuration)
                        --settings "CodeCoverage.runsettings"'
            projects: '**/*.Test.csproj'
          condition: succeeded()
          env:
            GRANTSETFIXSASTOKEN2: $(GRANTSETFIXSASTOKEN2)
        
        - script: eng\common\CIBuild.cmd 
                    -configuration $(_configuration)
                    -prepareMachine
                    -warnAsError 0
                    -bl 
                    /p:Use32Bit=$(_Use32Bit)
                    /p:Build=False
                    /p:Test=False
                    /p:Pack=True
                    /p:Sign=True
                    /p:DotNetFinalVersionKind=release
                    /p:Publish=True
                    /p:DotNetPublishUsingPipelines=True
                    $(BuildArgs)
          displayName: Pack
          condition: succeeded()
          
        - script: eng\common\CIBuild.cmd 
                    -configuration $(_configuration)
                    -prepareMachine
                    -warnAsError 0
                    -bl 
                    /p:Build=False
                    /p:Test=False
                    /p:Pack=False
                    /p:Sign=False
                    /p:DotNetFinalVersionKind=release
                    /p:Publish=True
                    $(BuildArgs)
          displayName: Publish to symbol server
          condition: and(succeeded(), eq(variables['SigningType'], 'real'))
          
          
