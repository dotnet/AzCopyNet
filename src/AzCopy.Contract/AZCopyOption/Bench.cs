
// <auto-generated />
namespace AzCopy.Contract
{
    public class BenchOption : CommandArgsBase
    {
        /// <summary>
		/// defines the type of blob at the destination. Used to allow benchmarking different blob types. Identical to the same-named parameter in the copy command (default "Detect")
        /// </summary>
		[CLIArgumentName("blob-type", true)]
		public string BlobType { get; set; }

        /// <summary>
		/// use this block size (specified in MiB). Default is automatically calculated based on file size. Decimal fractions are allowed - e.g. 0.25. Identical to the same-named parameter in the copy command
        /// </summary>
		[CLIArgumentName("block-size-mb")]
		public float? BlockSizeMb { get; set; }

        /// <summary>
		/// Check the length of a file on the destination after the transfer. If there is a mismatch between source and destination, the transfer is marked as failed. (default true)
        /// </summary>
		[CLIArgumentName("check-length")]
		public bool? CheckLength { get; set; }

        /// <summary>
		/// if true, the benchmark data will be deleted at the end of the benchmark run.  Set it to false if you want to keep the data at the destination - e.g. to use it for manual tests outside benchmark mode (default true)
        /// </summary>
		[CLIArgumentName("delete-test-data")]
		public bool? DeleteTestData { get; set; }

        /// <summary>
		/// number of auto-generated data files to use (default 100)
        /// </summary>
		[CLIArgumentName("file-count")]
		public uint? FileCount { get; set; }

        /// <summary>
		/// Defines if Azcopy should test uploads or downloads from this target. Valid values are 'upload' and 'download'. Defaulted option is 'upload'. (default "upload")
        /// </summary>
		[CLIArgumentName("mode", true)]
		public string Mode { get; set; }

        /// <summary>
		/// If larger than 0, create folders to divide up the data.
        /// </summary>
		[CLIArgumentName("number-of-folders")]
		public uint? NumberOfFolders { get; set; }

        /// <summary>
		/// create an MD5 hash of each file, and save the hash as the Content-MD5 property of the destination blob/file. (By default the hash is NOT created.) Identical to the same-named parameter in the copy command
        /// </summary>
		[CLIArgumentName("put-md5")]
		public bool? PutMd5 { get; set; }

        /// <summary>
		/// size of each auto-generated data file. Must be a number immediately followed by K, M or G. E.g. 12k or 200G (default "250M")
        /// </summary>
		[CLIArgumentName("size-per-file", true)]
		public string SizePerFile { get; set; }

        /// <summary>
		/// Caps the transfer rate, in megabits per second. Moment-by-moment throughput might vary slightly from the cap. If this option is set to zero, or it is omitted, the throughput isn't capped.
        /// </summary>
		[CLIArgumentName("cap-mbps")]
		public float? CapMbps { get; set; }

        /// <summary>
		/// Define the log verbosity for the log file, available levels: INFO(all requests/responses), WARNING(slow responses), ERROR(only failed requests), and NONE(no output logs). (default 'INFO'). (default "INFO")
        /// </summary>
		[CLIArgumentName("log-level", true)]
		public string LogLevel { get; set; }

        /// <summary>
		/// Define the output verbosity. Available levels: essential, quiet. (default "default")
        /// </summary>
		[CLIArgumentName("output-level", true)]
		public string OutputLevel { get; set; }

        /// <summary>
		/// Format of the command's output. The choices include: text, json. The default value is 'text'. (default "text")
        /// </summary>
		[CLIArgumentName("output-type", true)]
		public string OutputType { get; set; }

        /// <summary>
		/// Specifies additional domain suffixes where Azure Active Directory login tokens may be sent.  The default is '*.core.windows.net;*.core.chinacloudapi.cn;*.core.cloudapi.de;*.core.usgovcloudapi.net;*.storage.azure.net'. Any listed here are added to the default. For security, you should only put Microsoft Azure domains here. Separate multiple entries with semi-colons.
        /// </summary>
		[CLIArgumentName("trusted-microsoft-suffixes", true)]
		public string TrustedMicrosoftSuffixes { get; set; }

	}
}